<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.dncompany.mapper.user.MypageMapper">
    <!--반려동물 정보 등록/수정-->
    <!-- Insert 반려동물 정보 -->
    <insert id="insertPet" parameterType="AddPetDTO">
        <selectKey resultType="long" keyProperty="petId" order="BEFORE">
            SELECT SEQ_PET.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO PET(PET_ID, PET_SPECIES, PET_NAME,PET_AGE,PET_GENDER, PET_BIRTH_DATE, ADOPTION_DATE, USERS_ID)
        VALUES (#{petId}, #{petSpecies}, #{petName},
        (EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM #{petBirthDate}) + 1),
        #{petGender}, #{petBirthDate, jdbcType=DATE}, #{adoptionDate, jdbcType=DATE}, #{usersId})
    </insert>
    <!--미이페이지 메인-->
    <!--반려동물 정보-->
    <select id="selectPetList" parameterType="long" resultType="PetListDTO">
        SELECT P.PET_ID, P.PET_SPECIES, P.PET_NAME, P.PET_AGE, P.PET_GENDER, P.PET_BIRTH_DATE, P.ADOPTION_DATE, P.USERS_ID,
               PI.PET_IMG_ID, PI.PET_ORIGINAL_IMAGE_NAME, PI.PET_IMAGE_PATH, PI.PET_UUID, PI.PET_EXTENSION
        FROM PET P
                 LEFT JOIN PET_IMG PI ON P.PET_ID = PI.PET_ID
        WHERE P.USERS_ID = #{usersId}
    </select>

    <!--반려동물 단건 조회-->
    <select id="selectByPetId" parameterType="long" resultType="PetDetailDTO">
        SELECT P.PET_ID, P.PET_SPECIES, P.PET_NAME, P.PET_GENDER, P.PET_BIRTH_DATE, P.ADOPTION_DATE, P.USERS_ID,
               PI.PET_IMG_ID, PI.PET_ORIGINAL_IMAGE_NAME, PI.PET_IMAGE_PATH, PI.PET_UUID, PI.PET_EXTENSION
        FROM PET P
                 LEFT JOIN PET_IMG PI ON P.PET_ID = PI.PET_ID
        WHERE P.PET_ID = #{petId}
    </select>

    <!--회원정보-->
    <select id="userProfile" parameterType="long" resultType="userProfileDTO">
        SELECT U.USERS_ID,
               U.LOGIN_ID,
               U.NICKNAME,
               U.EMAIL,
               U.PHONE_NUMBER,
               (SELECT COUNT(*) FROM HELP_BOARD HB WHERE HB.USERS_ID = U.USERS_ID) AS HB_COUNT,
               (SELECT COUNT(*) FROM HELP_OFFER HO WHERE HO.USERS_ID = U.USERS_ID) AS HO_COUNT,
               U.POINT
        FROM USERS U
        WHERE U.USERS_ID = #{usersId}
    </select>



    <!--메인페이지 상세내역-->
    <!--도와주세요-->
    <select id="MyPageMainHelpMeListById" resultType="HelpMeListDTO" parameterType="long">
        SELECT RNUM, HELP_ID, USERS_ID, HELP_TITLE, HELP_CARE_TYPE, HELP_CARE_DATE, HELP_CREATED_AT,HELP_START_TIME,HELP_END_TIME, IS_ACCEPTED
        FROM(
                SELECT ROWNUM AS RNUM, HB.HELP_ID, HB.USERS_ID, HB.HELP_TITLE, HB.HELP_CARE_TYPE, HB.HELP_CARE_DATE,
                       HB.HELP_CREATED_AT, HB.HELP_START_TIME, HB.HELP_END_TIME,
                       CASE
                           WHEN EXISTS (
                               SELECT 1
                               FROM HELP_OFFER HO
                               WHERE HO.HELP_ID = HB.HELP_ID
                                 AND HO.HELP_OFFER_STATUS = 'ACCEPT'
                           ) THEN 1
                           ELSE 0
                           END AS IS_ACCEPTED
                FROM HELP_BOARD HB
                WHERE HB.USERS_ID = #{usersId}
                ORDER BY RNUM
        )
        <![CDATA[
        WHERE RNUM <=3
        ]]>


    </select>

    <!--도와드려요-->
    <select id="MyPageMainHelpYouListById" resultType="HelpYouListDTO" parameterType="long">
        SELECT RNUM, HELP_OFFER_ID, HELP_OFFER_STATUS,HELP_TITLE, HELP_ID, USERS_ID,LOGIN_ID
        FROM( SELECT ROWNUM AS RNUM,HB.USERS_ID,HB.HELP_ID,HO.HELP_OFFER_ID ,HB.HELP_TITLE,HO.HELP_OFFER_STATUS,U.LOGIN_ID
              FROM HELP_OFFER HO JOIN HELP_BOARD HB ON HO.HELP_ID = HB.HELP_ID
                                 JOIN USERS U ON HO.USERS_ID = U.USERS_ID
              WHERE HB.USERS_ID=#{usersId} AND HO.HELP_OFFER_STATUS='FENDING')


        <![CDATA[
        WHERE RNUM <=3
        ]]>
    </select>







    <!--정보수정-->
    <!-- 반려동물 수정 -->
    <update id="updatePetInfo" parameterType="PetModifyDTO">
        UPDATE PET
        SET PET_SPECIES = #{petSpecies}, PET_NAME = #{petName}, PET_GENDER = #{petGender}, PET_BIRTH_DATE = #{petBirthDate}, ADOPTION_DATE = #{adoptionDate},
            PET_AGE = (EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM #{petBirthDate}) + 1)
        WHERE PET_ID = #{petId}
    </update>

    <!---회원정보 수정-->

    <select id="selectUserProfileById" parameterType="long" resultType="UpdateUserProfileDTO">
        SELECT USERS_ID, LOGIN_ID, PASSWORD, NAME, NICKNAME, EMAIL, PHONE_NUMBER, ADDRESS, ADDRESS_DETAIL
        FROM USERS
        WHERE USERS_ID=#{usersId}
    </select>

    <update id="updateUserProfile" parameterType="UpdateUserProfileDTO">
        UPDATE USERS
        SET PASSWORD=#{password}, NAME=#{name}, NICKNAME=#{nickname}, EMAIL=#{email}, PHONE_NUMBER=#{phoneNumber},
            ADDRESS=#{address}, ADDRESS_DETAIL=#{addressDetail},ZIP_CODE=#{zipCode}
        WHERE USERS_ID=#{usersId}
    </update>


    <!--정보 삭제-->
    <!--반려동물 삭제-->
    <delete id="deletePetByPetId" parameterType="long">
        DELETE FROM PET
        WHERE PET_ID = #{petId}
    </delete>



    <!--페이징처리-->

    <select id="qnaListPage" resultType="QnaListDTO">
       SELECT RNUM,
              QNA_ID,
              QNA_TITLE,
              QNA_CREATED_AT,
              QNA_ANSWER_COUNT,
              USERS_ID
       FROM(
           SELECT ROWNUM AS RNUM,
                  QNA_ID,
                  QNA_TITLE,
                  QNA_CREATED_AT,
                  QNA_ANSWER_COUNT,
                  USERS_ID
               FROM(
                SELECT qb.QNA_ID,
                       qb.QNA_TITLE,
                       qb.QNA_CREATED_AT,
                       (SELECT COUNT(*) FROM QNA_ANSWER qa WHERE qa.QNA_ID = qb.QNA_ID) AS QNA_ANSWER_COUNT,
                       USERS_ID
                FROM QNA_BOARD qb
                WHERE USERS_ID = #{usersId}
                )
             <![CDATA[
             WHERE ROWNUM <= #{page.page} * #{page.size}
             ]]>
        )
       WHERE RNUM > (#{page.page} - 1) * #{page.size}
    </select>

    <select id="countQnaList" parameterType="long" resultType="_int">
        SELECT COUNT(*)
        FROM QNA_BOARD
        WHERE USERS_ID=#{usersId}
    </select>


    <!--도와주세요-->
    <select id="helpMeListPage" resultType="HelpMeListDTO">
        SELECT  RNUM,HELP_ID, USERS_ID, HELP_TITLE, HELP_CARE_TYPE, HELP_CARE_DATE, HELP_CREATED_AT
        FROM(
            SELECT ROWNUM AS RNUM,HELP_ID, USERS_ID, HELP_TITLE, HELP_CARE_TYPE, HELP_CARE_DATE, HELP_CREATED_AT
            FROM(
                SELECT HELP_ID, USERS_ID, HELP_TITLE, HELP_CARE_TYPE, HELP_CARE_DATE, HELP_CREATED_AT
                FROM HELP_BOARD
                WHERE USERS_ID = #{usersId}
                ORDER BY HELP_CARE_DATE
            )
            <![CDATA[
            WHERE ROWNUM <= #{page.page} * #{page.size}
            ]]>
        )
        WHERE RNUM > (#{page.page} - 1) * #{page.size}
    </select>

    <select id="countHelpMeList" parameterType="long" resultType="_int">
        SELECT COUNT(*)
        FROM HELP_BOARD
        WHERE USERS_ID=#{usersId}
    </select>

    <!--도와드려요-->
    <select id="helpYouListPage" resultType="HelpYouListDTO">
        SELECT RNUM, HELP_OFFER_ID, HELP_OFFER_STATUS,HELP_TITLE,LOGIN_ID, HELP_ID,USERS_ID,HELP_USERS_ID
        FROM(
            SELECT ROWNUM AS RNUM, HELP_OFFER_ID, HELP_OFFER_STATUS,HELP_TITLE,LOGIN_ID, HELP_ID, USERS_ID,HELP_USERS_ID
            FROM(
                SELECT HB.USERS_ID,HB.HELP_ID,HO.HELP_OFFER_ID ,HB.HELP_TITLE,HO.HELP_OFFER_STATUS,U.LOGIN_ID,HO.USERS_ID AS HELP_USERS_ID
                FROM HELP_OFFER HO JOIN HELP_BOARD HB ON HO.HELP_ID = HB.HELP_ID
                                 JOIN USERS U ON HO.USERS_ID = U.USERS_ID
                WHERE HB.HELP_ID=#{helpId} AND HB.USERS_ID=#{usersId} AND HO.HELP_OFFER_STATUS='PENDING'
            )
            <![CDATA[
            WHERE ROWNUM <= #{page.page} * #{page.size}
            ]]>
        )
        WHERE RNUM > (#{page.page} - 1) * #{page.size}
    </select>

    <select id="countHelpYouList" parameterType="long" resultType="_int">
        SELECT COUNT(*)
        FROM HELP_OFFER
        WHERE USERS_ID=#{usersId}
    </select>


    <!--초보zip-->
    <!--게시물-->
    <select id="zipBoardListPage" resultType="MypageZipBoardListDTO">
      SELECT RNUM, ZIP_ID, ZIP_TITLE, ZIP_CREATED_AT, USERS_ID
          FROM(
           SELECT ROWNUM AS RNUM, ZIP_ID, ZIP_TITLE, ZIP_CREATED_AT, USERS_ID
           FROM(SELECT ZIP_ID, ZIP_TITLE, ZIP_CREATED_AT, USERS_ID
        FROM ZIP_BOARD
        WHERE USERS_ID = #{usersId})
       <![CDATA[
       WHERE ROWNUM <= #{page.page} * #{page.size}
        ]]>
        )
       WHERE RNUM > (#{page.page} - 1) * #{page.size}
    </select>

    <select id="countZipBoardList" resultType="_int" parameterType="long" >
        SELECT COUNT(*)
        FROM ZIP_BOARD
        WHERE USERS_ID=#{usersId}
    </select>
    <!--댓글-->
    <select id="zipAnswerListPage" resultType="MypageZipAnswerListDTO">
       SELECT RNUM,
              ZIP_ANSWER_ID,
              ZIP_TITLE,
              ZIP_ANSWER_CONTENT,
              ZIP_ANSWER_CREATED_AT,
              USERS_ID,
              ZIP_ID
           FROM(SELECT ROWNUM AS RNUM,
               ZIP_ANSWER_ID,
               ZIP_TITLE,
               ZIP_ANSWER_CONTENT,
               ZIP_ANSWER_CREATED_AT,
               USERS_ID,
               ZIP_ID
           FROM( SELECT
               za.ZIP_ANSWER_ID,
               zb.ZIP_TITLE,
               za.ZIP_ANSWER_CONTENT,
               za.ZIP_ANSWER_CREATED_AT,
               za.USERS_ID,
               zb.ZIP_ID
        FROM ZIP_ANSWER za
                 JOIN ZIP_BOARD zb ON za.ZIP_ID = zb.ZIP_ID
        WHERE za.USERS_ID = #{usersId})
         <![CDATA[
       WHERE ROWNUM <= #{page.page} * #{page.size}
        ]]>
        )
       WHERE RNUM > (#{page.page} - 1) * #{page.size}
    </select>

    <select id="countZipAnswerList" resultType="_int" parameterType="long">
        SELECT COUNT(*)
        FROM ZIP_ANSWER
        WHERE USERS_ID=#{usersId}
    </select>

    <!-- 리뷰 -->
    <!--받은리뷰-->
    <select id="reviewListPage"  resultType="MypageReviewListDTO">
SELECT RNUM, REVIEW_ID, REVIEW_CONTENT, REVIEW_CREATED_AT, USERS_ID
FROM(SELECT  ROWNUM AS RNUM, REVIEW_ID, REVIEW_CONTENT, REVIEW_CREATED_AT, USERS_ID
FROM ( SELECT  R.REVIEW_ID, R.REVIEW_CONTENT, R.REVIEW_CREATED_AT, R.USERS_ID
        FROM REVIEW R
        WHERE R.USERS_ID = #{usersId})
  <![CDATA[
WHERE ROWNUM <= #{page.page} * #{page.size}
        ]]>
        )
WHERE RNUM > (#{page.page} - 1) * #{page.size}
    </select>

    <select id="countReviewList" resultType="_int" parameterType="long">
        SELECT COUNT(*)
        FROM REVIEW
        WHERE USERS_ID=#{usersId}
    </select>

   <!--댕냥바다-->
    <!--판매 내역-->
    <select id="mypageDnSellListPage"  resultType="MypageDnSellListDTO">
        SELECT RNUM, DN_ID, PRODUCT_CATEGORY, DN_TITLE, USERS_ID, DN_STATUS,
               PRODUCT_PRICE, PRODUCT_NAME,
               PRODUCT_PATH, PRODUCT_UUID, PRODUCT_EXTENSION
        FROM (
            SELECT ROWNUM AS RNUM, DN_ID, PRODUCT_CATEGORY, DN_TITLE, USERS_ID, DN_STATUS,
                   PRODUCT_PRICE, PRODUCT_NAME,
                   PRODUCT_PATH, PRODUCT_UUID, PRODUCT_EXTENSION
            FROM (
                SELECT DB.DN_ID, DB.DN_TITLE, DB.USERS_ID, DB.DN_STATUS,
                       P.PRODUCT_CATEGORY, P.PRODUCT_PRICE, P.PRODUCT_NAME,
                       PI.PRODUCT_PATH, PI.PRODUCT_UUID, PI.PRODUCT_EXTENSION
                FROM DN_BOARD DB
                    LEFT JOIN PRODUCT P ON P.PRODUCT_ID = DB.PRODUCT_ID
                    LEFT JOIN PRODUCT_IMG PI ON P.PRODUCT_ID = PI.PRODUCT_ID
                WHERE DB.USERS_ID = #{usersId}
            )
            <![CDATA[
            WHERE ROWNUM <= #{page.page} * #{page.size}
            ]]>
        )
        WHERE RNUM > (#{page.page} - 1) * #{page.size}
    </select>

    <select id="countMypageDnSellList" resultType="_int" parameterType="long">
        SELECT COUNT(*)
        FROM DN_BOARD
        WHERE USERS_ID=#{usersId}
    </select>

    <!-- 판매 완료 처리 -->
    <update id="updateDnStatusByDnId" parameterType="long">
        UPDATE DN_BOARD
        SET DN_STATUS = 'COMPLETE'
        WHERE DN_ID = #{dnId}
    </update>


    <!-- 댕냥 찜 목록 -->
    <select id="selectDnLikeListByUsersId" resultType="MypageDnLikeListDTO">
        SELECT RNUM, DN_ID, USERS_ID,
               DN_TITLE,
               PRODUCT_NAME, PRODUCT_PRICE,
               PRODUCT_IMG_ID, PRODUCT_PATH, PRODUCT_UUID, PRODUCT_EXTENSION,
               SELLER_LOGIN_ID, SELLER_NICKNAME
        FROM (
             SELECT ROWNUM AS RNUM, DN_ID, USERS_ID,
                    DN_TITLE,
                    PRODUCT_NAME, PRODUCT_PRICE,
                    PRODUCT_IMG_ID, PRODUCT_PATH, PRODUCT_UUID, PRODUCT_EXTENSION,
                    SELLER_LOGIN_ID, SELLER_NICKNAME
             FROM (
                      SELECT DL.DN_ID, DL.USERS_ID,
                             DB.DN_TITLE,
                             P.PRODUCT_NAME, P.PRODUCT_PRICE,
                             PI.PRODUCT_IMG_ID, PI.PRODUCT_PATH, PI.PRODUCT_UUID, PI.PRODUCT_EXTENSION,
                             U.LOGIN_ID AS SELLER_LOGIN_ID, U.NICKNAME AS SELLER_NICKNAME
                      FROM DN_LIKE DL
                               JOIN DN_BOARD DB ON DL.DN_ID = DB.DN_ID
                               LEFT JOIN PRODUCT P ON DB.PRODUCT_ID = P.PRODUCT_ID
                               JOIN USERS U ON U.USERS_ID = DB.USERS_ID
                               LEFT JOIN PRODUCT_IMG PI ON P.PRODUCT_ID = PI.PRODUCT_ID
                      WHERE DL.USERS_ID = #{usersId}
                  )
            <![CDATA[
             WHERE ROWNUM <= #{page.page} * #{page.size}
            ]]>
         )
        WHERE RNUM > (#{page.page} - 1) * #{page.size}
    </select>

    <select id="countDnLikeByUsersId" parameterType="long" resultType="_int">
        SELECT COUNT(*)
        FROM DN_LIKE DL
        WHERE DL.USERS_ID = #{usersId}
    </select>

    <insert id="insertReview" parameterType="ReviewWriteDTO">
        INSERT INTO ADMIN.REVIEW (
        REVIEW_ID,
        REVIEW_STAR_RATING,
        REVIEW_CONTENT,
        HELP_OFFER_ID,
        REVIEW_TITLE,
        HELP_ID,
        REVIEW_CHECK_STATUS,
        USERS_ID
        ) VALUES (
        SEQ_REVIEW.nextval,
        #{reviewStarRating},
        #{reviewContent},
        #{helpOfferId},
        #{reviewTitle},
        #{helpId},
        '정상',
        #{usersId}
        )
    </insert>


    <update id="updateHelpStatus">
        UPDATE HELP_OFFER
        SET HELP_OFFER_STATUS=
            CASE
                WHEN HELP_OFFER_ID=#{helpOfferId} THEN 'ACCEPT'
        ELSE 'REJECT' END
        WHERE HELP_ID =#{helpId}
    </update>

</mapper>

















