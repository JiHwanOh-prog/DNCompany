<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.dncompany.mapper.dn.DnBoardMapper">
    <!-- 게시글 작성 쿼리 -->
    <!-- 그 중 DN_BOARD 쪽에만 들어가는 데이터를 담은 쿼리-->
    <insert id="insertDnBoard" parameterType="DnBoardWriteDTO">
        <selectKey resultType="Long" keyProperty="dnId" order="BEFORE">
            SELECT SEQ_DN_BOARD.nextval FROM DUAL
        </selectKey>
        INSERT INTO DN_BOARD (DN_ID, USERS_ID, DN_PET_CATEGORY, DN_TITLE, DN_CONTENT)
        VALUES (#{dnId}, #{usersId}, #{dnPetCategory},#{dnTitle}, #{dnContent})
    </insert>

    <!-- 게시글 작성 시 중간 테이블인 Sell 테이블 작성 쿼리 -->
    <insert id="insertSellBoard" parameterType="DnSellBoardDTO">
        INSERT INTO DN_SELL (DN_ID, USERS_ID, PRODUCT_ID)
        VALUES (#{dnId}, #{usersId}, #{productId})
    </insert>

    <!-- 게시물 한 건 조회 쿼리 -->
    <!--TODO: 게시글 한건 LIKE 조회 추가함.-->
    <select id="selectDnBoardById" parameterType="Long" resultType="DnBoardDetailDTO">
        SELECT DB.DN_ID, DB.DN_CREATED_AT, DB.DN_UPDATED_AT, DB.DN_PET_CATEGORY, DB.DN_TITLE, DB.DN_CONTENT,
               P.PRODUCT_CATEGORY, P.PRODUCT_PRICE, P.PRODUCT_ID, U.USERS_ID, U.LOGIN_ID,
               PI.PRODUCT_IMG_ID, PI.PRODUCT_ORIGINAL_FILENAME, PI.PRODUCT_UUID, PI.PRODUCT_PATH, PI.PRODUCT_EXTENSION,
               (SELECT COUNT(*) FROM DN_LIKE DL WHERE DL.DN_ID = DB.DN_ID) AS LIKE_COUNT
        FROM DN_BOARD DB
                 LEFT JOIN DN_SELL DS ON DB.DN_ID = DS.DN_ID
                 LEFT JOIN PRODUCT P ON DS.PRODUCT_ID = P.PRODUCT_ID
                 LEFT JOIN USERS U ON DB.USERS_ID = U.USERS_ID
                 LEFT JOIN PRODUCT_IMG PI ON P.PRODUCT_ID = PI.PRODUCT_ID
        WHERE DB.DN_ID = #{dnId}
    </select>

    <!-- 전체 게시글 조회 쿼리 -->
    <select id="selectAllDnBoardList" resultType="DnBoardListDTO">
        SELECT DB.DN_ID, DB.DN_CREATED_AT, DB.DN_UPDATED_AT, DB.DN_PET_CATEGORY, DB.DN_TITLE,
               P.PRODUCT_CATEGORY, P.PRODUCT_PRICE, P.PRODUCT_ID, U.USERS_ID, U.LOGIN_ID,
               PI.PRODUCT_IMG_ID, PI.PRODUCT_ORIGINAL_FILENAME, PI.PRODUCT_UUID, PI.PRODUCT_PATH, PI.PRODUCT_EXTENSION
        FROM DN_BOARD DB
                 LEFT JOIN DN_SELL DS ON DB.DN_ID = DS.DN_ID
                 LEFT JOIN PRODUCT P ON DS.PRODUCT_ID = P.PRODUCT_ID
                 LEFT JOIN USERS U ON DB.USERS_ID = U.USERS_ID
                 LEFT JOIN PRODUCT_IMG PI ON P.PRODUCT_ID = PI.PRODUCT_ID
        ORDER BY P.PRODUCT_PRICE
    </select>

    <!-- 글 수정 쿼리 -->
    <update id="updateDnBoard" parameterType="DnBoardModifyDTO">
        UPDATE DN_BOARD
        SET DN_PET_CATEGORY = #{dnPetCategory}, DN_TITLE = #{dnTitle}, DN_CONTENT = #{dnContent}
        WHERE DN_ID = #{dnId}
    </update>

    <!-- 글 삭제 쿼리-->
    <delete id="deleteDnBoard" parameterType="Long">
        DELETE FROM DN_BOARD
        WHERE DN_ID = #{dnId}
    </delete>

    <!-- 게시글 삭제 시 중간 테이블인 Sell 테이블에 있는 값도 동시 삭제 쿼리 -->
    <delete id="deleteDnSell" parameterType="Long">
        DELETE FROM DN_SELL
        WHERE DN_ID = #{dnId}
    </delete>

    <!-- 전체 페이지 수 조회 쿼리-->
    <select id="selectAllDnBoardListCondition" resultType="_int">
        SELECT COUNT(*)
        FROM DN_BOARD DB
                 LEFT JOIN DN_SELL DS ON DB.DN_ID = DS.DN_ID
                 LEFT JOIN PRODUCT P ON DS.PRODUCT_ID = P.PRODUCT_ID
                 LEFT JOIN USERS U ON DB.USERS_ID = U.USERS_ID
                 LEFT JOIN PRODUCT_IMG PI ON P.PRODUCT_ID = PI.PRODUCT_ID
    </select>

    <!-- 페이지 처리하면서 전체 조회 -->
    <select id="selectAllDnBoardListWithPage" resultType="DnBoardListDTO">
        SELECT RNUM,DN_ID, DN_CREATED_AT, DN_UPDATED_AT, DN_PET_CATEGORY, DN_TITLE,
               PRODUCT_CATEGORY, PRODUCT_PRICE, PRODUCT_ID, USERS_ID, LOGIN_ID,
               PRODUCT_IMG_ID, PRODUCT_ORIGINAL_FILENAME, PRODUCT_UUID, PRODUCT_PATH, PRODUCT_EXTENSION
            FROM (
                 SELECT ROWNUM AS RNUM, DN_ID, DN_CREATED_AT, DN_UPDATED_AT, DN_PET_CATEGORY, DN_TITLE,
                        PRODUCT_CATEGORY, PRODUCT_PRICE, PRODUCT_ID, USERS_ID, LOGIN_ID,
                        PRODUCT_IMG_ID, PRODUCT_ORIGINAL_FILENAME, PRODUCT_UUID, PRODUCT_PATH, PRODUCT_EXTENSION
                 FROM(
                         SELECT DB.DN_ID, DB.DN_CREATED_AT, DB.DN_UPDATED_AT, DB.DN_PET_CATEGORY, DB.DN_TITLE,
                                P.PRODUCT_CATEGORY, P.PRODUCT_PRICE, P.PRODUCT_ID, U.USERS_ID, U.LOGIN_ID,
                                PI.PRODUCT_IMG_ID, PI.PRODUCT_ORIGINAL_FILENAME, PI.PRODUCT_UUID, PI.PRODUCT_PATH, PI.PRODUCT_EXTENSION
                         FROM DN_BOARD DB
                                  LEFT JOIN DN_SELL DS ON DB.DN_ID = DS.DN_ID
                                  LEFT JOIN PRODUCT P ON DS.PRODUCT_ID = P.PRODUCT_ID
                                  LEFT JOIN USERS U ON DB.USERS_ID = U.USERS_ID
                                  LEFT JOIN PRODUCT_IMG PI ON P.PRODUCT_ID = PI.PRODUCT_ID
                         ORDER BY P.PRODUCT_PRICE
                     )
                 <![CDATA[
                 WHERE ROWNUM <= #{page.page} * #{page.size}
                 ]]>
            )
            WHERE RNUM > (#{page.page} - 1) * #{page.size}
    </select>

    <!-- 카테고리 검색 카운트-->
    <select id="countBySearchCondition" resultType="_int">
        SELECT COUNT(*)
        FROM DN_BOARD DB
            JOIN USERS U ON DB.USERS_ID = U.USERS_ID
            LEFT JOIN DN_SELL DS ON DB.DN_ID = DS.DN_ID
            LEFT JOIN PRODUCT P ON DS.PRODUCT_ID = P.PRODUCT_ID
        <trim prefix="WHERE" prefixOverrides="AND">
            <if test="cond.dnPetCategory != null and cond.dnPetCategory != ''">
                AND DB.DN_PET_CATEGORY = #{cond.dnPetCategory}
            </if>
            <if test="cond.productCategory != null and cond.productCategory != ''">
                AND P.PRODUCT_CATEGORY = #{cond.productCategory}
            </if>
            <if test="cond.keyword != null and cond.keyword != ''">
                AND (DB.DN_TITLE LIKE '%' || #{cond.keyword} || '%' OR  DB.DN_CONTENT LIKE '%' || #{cond.keyword} || '%')
            </if>
        </trim>
    </select>


    <!-- 페이지 처리 전체 조회, 카테고리 검색 기능 추가 -->
    <select id="selectAllDnBoardListCondWithPage" resultType="DnBoardListDTO">
        SELECT RNUM,DN_ID, DN_CREATED_AT, DN_UPDATED_AT, DN_PET_CATEGORY, DN_TITLE,
        PRODUCT_CATEGORY, PRODUCT_PRICE, PRODUCT_ID, USERS_ID, LOGIN_ID,
        PRODUCT_IMG_ID, PRODUCT_ORIGINAL_FILENAME, PRODUCT_UUID, PRODUCT_PATH, PRODUCT_EXTENSION, LIKE_COUNT
        FROM (
            SELECT ROWNUM AS RNUM, DN_ID, DN_CREATED_AT, DN_UPDATED_AT, DN_PET_CATEGORY, DN_TITLE,
            PRODUCT_CATEGORY, PRODUCT_PRICE, PRODUCT_ID, USERS_ID, LOGIN_ID,
            PRODUCT_IMG_ID, PRODUCT_ORIGINAL_FILENAME, PRODUCT_UUID, PRODUCT_PATH, PRODUCT_EXTENSION, LIKE_COUNT
            FROM(
                SELECT DB.DN_ID, DB.DN_CREATED_AT, DB.DN_UPDATED_AT, DB.DN_PET_CATEGORY, DB.DN_TITLE,
                P.PRODUCT_CATEGORY, P.PRODUCT_PRICE, P.PRODUCT_ID, U.USERS_ID, U.LOGIN_ID,
                PI.PRODUCT_IMG_ID, PI.PRODUCT_ORIGINAL_FILENAME, PI.PRODUCT_UUID, PI.PRODUCT_PATH, PI.PRODUCT_EXTENSION,
                (SELECT COUNT(*) FROM DN_LIKE DL WHERE DL.DN_ID = DB.DN_ID) AS LIKE_COUNT
                FROM DN_BOARD DB
                LEFT JOIN DN_SELL DS ON DB.DN_ID = DS.DN_ID
                LEFT JOIN PRODUCT P ON DS.PRODUCT_ID = P.PRODUCT_ID
                LEFT JOIN USERS U ON DB.USERS_ID = U.USERS_ID
                LEFT JOIN PRODUCT_IMG PI ON P.PRODUCT_ID = PI.PRODUCT_ID
                <trim prefix="WHERE" prefixOverrides="AND">
                    <if test="cond.dnPetCategory != null and cond.dnPetCategory != ''">
                        AND DB.DN_PET_CATEGORY = #{cond.dnPetCategory}
                    </if>
                    <if test="cond.productCategory != null and cond.productCategory != ''">
                        AND P.PRODUCT_CATEGORY = #{cond.productCategory}
                    </if>
                    <if test="cond.keyword != null and cond.keyword != ''">
                        AND (DB.DN_TITLE LIKE '%' || #{cond.keyword} || '%' OR  DB.DN_CONTENT LIKE '%' || #{cond.keyword} || '%')
                    </if>
                </trim>
                ORDER BY
                <choose>
                    <when test="cond.order == 'popular-order'">
                        LIKE_COUNT DESC
                    </when>
                    <when test="cond.order == 'price-desc-order'">
                        P.PRODUCT_PRICE DESC
                    </when>
                    <when test="cond.order == 'price-asc-order'">
                        P.PRODUCT_PRICE ASC
                    </when>
                    <otherwise>
                        DB.DN_UPDATED_AT DESC
                    </otherwise>
                </choose>
            )
            <![CDATA[
                     WHERE ROWNUM <= #{page.page} * #{page.size}
                     ]]>
        )
        WHERE RNUM > (#{page.page} - 1) * #{page.size}
    </select>

</mapper>